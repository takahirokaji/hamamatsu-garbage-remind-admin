#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("admin-server:server");
const http = require("http");

const port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

// const mysql = require("mysql");

// function handleDisconnect() {
//   const connection = mysql.createConnection({
//     host: "us-cdbr-east-04.cleardb.com",
//     user: "b215f8f6b04092",
//     password: "0afba604",
//     database: "heroku_bb69fae61fac0c1",
//   });
//   // const connection = mysql.createConnection({
//   //   host: "localhost",
//   //   port: 3306,
//   //   user: "node",
//   //   password: "pw",
//   //   database: "garbage_admin",
//   // });

//   //connection取得
//   connection.connect(function (err) {
//     console.log("CONNECTION: continue");
//     if (err) {
//       console.log("ERROR.CONNECTION_DB: ", err);
//       setTimeout(handleDisconnect, 1000);
//     }
//   });

//   //error('PROTOCOL_CONNECTION_LOST')時に再接続
//   connection.on("error", function (err) {
//     console.log("ERROR.DB: ", err);
//     if (err.code === "PROTOCOL_CONNECTION_LOST") {
//       console.log("ERROR.CONNECTION_LOST: ", err);
//       handleDisconnect();
//     } else {
//       throw err;
//     }
//   });

//   // connection.query("SELECT * from test;", function (err, rows, fields) {
//   //   if (err) {
//   //     console.log("err: " + err);
//   //   }
//   //   const sql =
//   //     "CREATE TABLE cities (name constCHAR(255) NOT NULL PRIMARY KEY, garbage_number INT NOT NULL,initial constCHAR(255) NOT NULL, how_read constCHAR(255) NOT NULL)";
//   //   connection.query(sql, function (err, result) {
//   //     if (err) throw err;
//   //     console.log("Table created");
//   //   });
//   // });
// }

// handleDisconnect();

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(`listening on ${port}`);
  debug("Listening on " + bind);
}
